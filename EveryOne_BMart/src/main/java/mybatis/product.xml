<?xml version="1.0" encoding="UTF-8"?>

<!-- product.xml -->
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="product"> 
	<select id="adminTotalCount" resultType="int"
		parameterType="hashmap">
		select count(*) from product
		<if test="keyword != null and keyword != ''">
			where pname like #{keyword}
			or pcategory like #{keyword}
			or pnum like #{keyword}
		</if>
	</select>

	<select id="getProductList" resultType="model.ProductBean">
		select * from product
		<if test="keyword != null and keyword != ''">
			where pname like #{keyword}
			or pcategory like #{keyword}
			or pnum like #{keyword}
		</if>
		order by pnum desc
	</select>

	<insert id="insertProduct">
		insert into 
		product(pnum,id, pname,pimage, price,capacity, pcontent, expritydate, origin, stock, pcategory, inputdate,ordercount, ad) 
		values(seqprod.nextval,#{id},#{pname},#{pimage}, #{price}, #{capacity},#{pcontent},#{expritydate}, #{origin},#{stock},#{pcategory},sysdate,0,0)
	</insert>

	<delete id="deleteProduct">
		delete from product where pnum=#{pnum}
	</delete>

	<!-- 상품 상세보기,상품 수정하기, 장바구니 목록의 상품 -->
	<select id="detailViewByNum" resultType="model.ProductBean">
		select * from product
		where pnum = #{pnum}
	</select>

	<insert id="insertCategory">
		insert into category (num,name)
		values(cate_seq.nextval,#{name})
	</insert>

	<update id="updateProduct">
		update product set pname = #{pname},price = #{price},
		stock=#{stock},pimage= #{pimage},pcontent = #{pcontent}
		where pnum=#{pnum}
	</update>

	<update id="updateStock">
		update product
		set stock = stock - #{stock}
		where pnum = #{pnum}
	</update>

	<update id="updateOrdercount">
		update product set ordercount = ordercount+#{ordercount}
		where pnum = #{pnum}
	</update>

	<select id="getRangeTest" resultType="product">

	SELECT pname, ordercount
	FROM (SELECT pname, ordercount
	FROM (SELECT pname, ordercount FROM product ORDER BY ordercount DESC)
	WHERE ROWNUM between 1 and 5)
	</select>

	<select id="getCateChart" resultType="product">
		select pcategory,sum(ordercount) as ordercount
		from product
		group by pcategory
	</select>

	<!-- 베스트 상품 목록 조회 TOP10 -->
	<select id="getBestProduct" resultType="product">
		select * from (select * from product order by ordercount desc) where rownum between 1 and 10
	</select>
	
	<!-- 상품 상세 조회 -->
	<select id="getProductInfo" resultType="product">
		select * from product where pnum=#{pnum}
	</select>
	
	<!-- main에 최근 본 상품 조회 -->
	<select id="getWatchLists" resultType="product">
		select * from watch w join product p on w.pnum = p.pnum and w.id=#{id} order by wnum desc
	</select>
	
	<!-- 최근 본 상품 페이지 - 전체 조회 -->
	<select id="getWatchCount" resultType="int">
		select count(*) from watch w join product p on w.pnum = p.pnum and w.id=#{id} 
	</select>
	<select id="getWatch" resultType="product">
		select * from watch w join product p on w.pnum = p.pnum and w.id=#{id} 
		<if test="range == 'recently'">
			order by wnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
	</select>
	
	<!-- 찜 버튼 구현을 위한 내역 조회 -->
	<select id="getInterestLists" resultType="product">
		select * from interest i join product p on i.pnum = p.pnum and i.id=#{id} order by inum desc
	</select>
	
	<!-- 찜한 상품 페이지 - 목록 조회 -->
	<select id="getInterestCount" resultType="int">
		select count(*) from interest i join product p on i.pnum = p.pnum and i.id=#{id} 
	</select>
	<select id="getInterest" resultType="product">
		select * from interest i join product p on i.pnum = p.pnum and i.id=#{id} 
		<if test="range == 'recently'">
			order by inum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
	</select>
	
	<!-- 카테고리에 해당하는 상품 조회 -->
	<select id="getTotalCount" resultType="int">
		select count(*) from product where pcategory=#{category}
	</select>
	
 	<select id="getProductRange" resultType="product">
		select * from product where pcategory=#{category}
		<if test="range == 'recently'">
			order by pnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
		<if test="range == 'best'">
			order by ordercount desc
		</if>
	</select>
	
	<!-- 신상품에 해당하는 상품 조회 -->
	<select id="getNewProductCount" resultType="int">
		select count(*) from product where inputdate between sysdate-3 and sysdate
	</select>
	
	<select id="getNewProductRange" resultType="product">
		select * from product where inputdate between sysdate-3 and sysdate
		<if test="range == 'recently'">
			order by pnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
	</select>
	
	<!-- 검색어에 해당하는 상품 조회 -->
	<select id="getKeywordCount" resultType="int">
		select count(*) from product where pname like #{keyword} or pcategory like #{keyword} 
	</select>
	
 	<select id="getKeywordRange" resultType="product">
		select * from product where pname like #{keyword} or pcategory like #{keyword} 
		<if test="range == 'recently'">
			order by pnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
		<if test="range == 'best'">
			order by ordercount desc
		</if>
	</select>
	
	<!-- 광고상품 조회 -->
	<select id="getAdProductCount" resultType="int">
		select count(*) from product where ad = 1 
		<if test="range == 'recently'">
			order by pnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
	</select>
	
 	<select id="getAdProductList" resultType="product">
		select * from product where ad = 1 
		<if test="range == 'recently'">
			order by pnum desc
		</if>
		<if test="range == 'highPrice'">
			order by price desc
		</if>
		<if test="range == 'rowPrice'">
			order by price
		</if>
	</select>
	
	<insert id="insertProductByOwner">
		insert into product(pnum, id, pname, pimage, price, pcontent, stock, pcategory, inputdate)
		values(seqprod.nextval, #{id}, #{pname}, #{pimage}, #{price}, #{pcontent}, #{stock}, #{pcategory}, sysdate)
	</insert>
	
	<select id="getTotalCountForOwner" resultType="int">
   		select count(*) from product where 1=1 and id=#{id}
	    <!-- dcategory에 대한 조건 추가 -->
	    <if test="whatColumn != null and whatColumn != ''">
	        AND pcategory = #{whatColumn}
	    </if>
	    
	    <!-- pname 조건: '%'을 사용하여 LIKE 조건으로 감싸기 -->
	    <if test="inputPname != null and inputPname != ''">
	        AND pname LIKE #{inputPname}
	    </if>
	
	    <!-- pnum 조건: '%'을 사용하여 LIKE 조건으로 감싸기 -->
	    <if test="inputPnum != null and inputPnum != ''">
	        AND pnum LIKE #{inputPnum}
	    </if>
	
	    <!-- inputdate 조건: 날짜 범위로 필터링 -->
		<if test="inputDay1 != null and inputDay1 != ''">
			<![CDATA[
			    AND TO_CHAR(inputdate, 'YYYY-MM-DD') >= #{inputDay1}
			]]>
		</if>
		<if test="inputDay2 != null and inputDay2 != ''">
		    <![CDATA[
			    AND TO_CHAR(inputdate, 'YYYY-MM-DD') <= #{inputDay2}
		    ]]>
		</if>
	</select>
	
	<select id="getAllProductForOwner" resultType="product">
		select * from product
		<where>
	    	id=#{id}
		    <!-- pcategory에 대한 조건 추가 -->
		    <if test="whatColumn != null and whatColumn != ''">
		        and pcategory = #{whatColumn} 
		    </if>
		    
		    <!-- pname 조건: '%'을 사용하여 LIKE 조건으로 감싸기 -->
		    <if test="inputPname != null and inputPname != ''">
		        and pname LIKE #{inputPname} 
		    </if>
		
		    <!-- pnum 조건: '%'을 사용하여 LIKE 조건으로 감싸기 -->
		    <if test="inputPnum != null and inputPnum != ''">
		        and pnum LIKE #{inputPnum} 
		    </if>
		
		    <!-- inputdate 조건: 날짜 범위로 필터링 -->
		    <if test="inputDay1 != null and inputDay1 != ''">
			    <![CDATA[
			    AND TO_CHAR(inputdate, 'YYYY-MM-DD') >= #{inputDay1}
			    ]]>
		    </if>
		    <if test="inputDay2 != null and inputDay2 != ''">
			    <![CDATA[
			    AND TO_CHAR(inputdate, 'YYYY-MM-DD') <= #{inputDay2}
			    ]]>
		    </if>
	    </where>
	    order by pnum
	</select>
	
	<select id="checkProductApproval" resultType="int">
		select count(*) from document where writer=#{id} and dcategory='상품등록' and dstatus=1
	</select>
	
	<select id="getProductByPnum_Owner" resultType="product">
		select * from product where pnum=#{pnum}
	</select>
	
	<select id="getPcategoryListByWriter" resultType="document.model.DocumentBean">
		select * from document where writer=#{id} and dcategory='상품등록' and dstatus=1
	</select>
	
	<delete id="deleteProductByOwner">
		delete from product where pnum=#{pnum}
	</delete>
	
	<update id="updateProductByOwner">
		update product set price=#{price}, pcontent=#{pcontent}, stock=#{stock} where pnum=#{pnum}
	</update>
	
	<select id="bestProduct5ForOwner" resultType="product">
		select rownum, pname, ordercount
		from (select rownum, pname, ordercount from product where id=#{id} order by ordercount desc)
		where rownum between 1 and 5 
	</select>
	
	<select id="worstProduct5ForOwner" resultType="product">
		select rownum, pname, ordercount
		from (select rownum, pname, ordercount from product where id=#{id} order by ordercount asc)
		where rownum between 1 and 5 
	</select>
	
	<select id="selectProductById" parameterType="int" resultType="product">
        SELECT * FROM product WHERE pnum = #{pnum}
    </select>
	
	<update id="updateOwnerProduct">
		update product set pname = #{pname}, price = #{price}, stock = #{stock}, capacity = #{capacity, jdbcType=VARCHAR}, pcontent = #{pcontent}, pcategory = #{pcategory}, inputdate = sysdate, ordercount = #{ordercount}, pimage = #{pimage, jdbcType=VARCHAR}
    	where pnum = #{pnum}
	</update>
    
	<select id="getStockByPnum" resultType="Integer">
		select stock from product
		where pnum = #{pnum}
	</select>
	
	<update id="minusStock" parameterType="map">
		update product set stock = #{minusStock} where pnum=#{pnum}
	</update>
	
	<update id="plustStock" parameterType="map">
		update product set stock = #{plusStock} where pnum=#{pnum}
	</update>
	
	 <resultMap id="ProductResultMap" type="model.ProductBean">
        <id property="pnum" column="pnum"/>
	    <result property="pname" column="pname"/>
	    <result property="price" column="total_sales"/>  <!-- 매출 총액을 price에 설정 -->
	    <result property="ordercount" column="total_orders"/>  <!-- 주문 건수를 ordercount에 설정 -->
    </resultMap>
	
	<select id="getPrdYearSumForOwner" resultMap="ProductResultMap">
		select p.pnum, p.pname, coalesce(count(o.pamount), 0) as total_orders, coalesce(sum(o.pamount * p.price), 0) as total_sales
		from product p left join orderInfo o on p.pnum=o.pnum
		and extract(year from o.orderdate) = extract(year from sysdate)
		where p.id = #{id}
		group by p.pnum, p.pname
		order by p.pnum
	</select>
	<update id="plusOrderCount" parameterType="map">
		update product set ordercount = #{oCount}
		where pnum = #{pnum}
	</update>
	<select id="getOrderCount" resultType="int">
		select ordercount from product where pnum = #{pnum}
	</select>
</mapper>